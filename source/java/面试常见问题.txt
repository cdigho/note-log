第一天
Java基础，
1、引用类型：强、软、弱、虚
	强：只要强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。如果想中断强引用与对象之间的联系，可以显示的将强引用赋值为null，这样一来，JVM就可以适时的回收对象了
	软：在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。
	弱：无论内存是否足够，只要 JVM 开始进行垃圾回收，那些被弱引用关联的对象都会被回收。
	虚：引用队列可以与软引用、弱引用以及虚引用一起配合使用，当垃圾回收器准备回收一个对象时，如果发现它还有引用，那么就会在回收对象之前，把这个引用加入到与之关联的引用队列中去。对开发来说没啥用。	
2、map和并发map需要深入理解，
	死锁发生在1.7版本
	当单线程操作时候，不会发生死锁，计算hash是使用&运算hash&(hash-1)，然后计算时基本使用移位运算（位干扰）
	当多线程扩容时候，
	T1在进行扩容时候，此时下标3 链表上1 节点位杨过 2节点为龙女,扩容后，龙女和杨过链表顺序颠倒即 原杨过->龙女变为龙女->杨过
	T2也要进行扩容并在扩容计算entry时阻塞了，此时t2阻塞结束拿到的map为t1扩容后但是先前指向e->杨过 next->龙女，然后根据当前情况进行扩容
	即e->龙女 然后放到新数组中，然后e=next next->杨过，
	此时next->龙女，仔细发现杨过.next=龙女,e=杨过,e.next=龙女且龙女.next=杨过，一个环形循环产生为死循环。
	其他的map的原理不用多说大家应该都看过源码。
3、threadlocal，
	（1）各个线程的数据互不干扰，线程数据隔离，值保存在当前的thread中即获取Thread.currentThread
	(2)ThreadLoalMap
		在插入过程中，根据ThreadLocal对象的hash值，定位到table中的位置i，过程如下：
		1、如果当前位置是空的，那么正好，就初始化一个Entry对象放在位置i上；
		2、不巧，位置i已经有Entry对象了，如果这个Entry对象的key正好是即将设置的key，那么重新设置Entry中的value；
		3、很不巧，位置i的Entry对象，和即将设置的key没关系，那么只能找下一个空位置；
	(3)内存泄露
	key被保存到了WeakReference对象中。
	这就导致了一个问题，ThreadLocal在没有外部强引用时，
	发生GC时会被回收，如果创建ThreadLocal的线程一直持续运行，
	那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露。
	(4)解决内存泄漏
	如果使用ThreadLocal的set方法之后，没有显示的调用remove方法，就有可能发生内存泄露，所以养成良好的编程习惯十分重要，使用完ThreadLocal之后，记得调用remove方法。
	(5)解决其他问题
	当多线程下使用simpledateformat时候，由于线程不安全会导致问题
	多线程场景下time被别的线程修改，导致线程不安全，那么使用ThreadLocal就会避免问题，原因线程数据隔离
4、nio aio理解概念，
	nio:
		(1)说明：
		是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，成为解决高并发与大量连接、I/O处理问题的有效方式
		(2)组成部分：
		Channels、Buffers、Selectors
		Channels：
		FileChannel、DatagramChannel、SocketChannel、ServerSocketChannel
		Buffers:
		ByteBuffer、CharBuffer、DoubleBuffer、FloatBuffer、IntBuffer、LongBuffer、ShortBuffer
		Selectors:
		Selector会不断的轮询注册在上面的所有channel，如果某个channel为读写等事件做好准备，那么就处于就绪状态，通过Selector可以不断轮询发现出就绪的channel，进行后续的IO操作。
	aio
5、redis业务结合就是秒杀系统问题，
	涉及什么漏桶算法，
	long timeStamp = getNowTime(); 
	int capacity = 10000;// 桶的容量
	int rate = 1;//水漏出的速度
	int water = 100;//当前水量

	public static bool control() {   
		//先执行漏水，因为rate是固定的，所以可以认为“时间间隔*rate”即为漏出的水量
		long  now = getNowTime();
		water = Math.max(0, water - (now - timeStamp) * rate);
		timeStamp = now;

		if (water < capacity) { // 水还未满，加水
			water ++; 
			return true; 
		} else { 
			return false;//水满，拒绝加水
	   } 
	} 
	一致性hash算法，
	/** 
  * 带虚拟节点的一致性Hash算法 
  */  
 public class ConsistentHashingWithoutVirtualNode {  

     //待添加入Hash环的服务器列表  
     private static String[] servers = {"192.168.0.0:111", "192.168.0.1:111", "192.168.0.2:111",  
             "192.168.0.3:111", "192.168.0.4:111"};  

     //真实结点列表,考虑到服务器上线、下线的场景，即添加、删除的场景会比较频繁，这里使用LinkedList会更好  
     private static List<String> realNodes = new LinkedList<String>();  

     //虚拟节点，key表示虚拟节点的hash值，value表示虚拟节点的名称  
     private static SortedMap<Integer, String> virtualNodes = new TreeMap<Integer, String>();  

     //虚拟节点的数目，这里写死，为了演示需要，一个真实结点对应5个虚拟节点  
     private static final int VIRTUAL_NODES = 5;  

     static{  
         //先把原始的服务器添加到真实结点列表中  
         for(int i=0; i<servers.length; i++)  
             realNodes.add(servers[i]);  

         //再添加虚拟节点，遍历LinkedList使用foreach循环效率会比较高  
         for (String str : realNodes){  
             for(int i=0; i<VIRTUAL_NODES; i++){  
                 String virtualNodeName = str + "&&VN" + String.valueOf(i);  
                 int hash = getHash(virtualNodeName);  
                 System.out.println("虚拟节点[" + virtualNodeName + "]被添加, hash值为" + hash);  
                 virtualNodes.put(hash, virtualNodeName);  
             }  
         }  
         System.out.println();  
     }  

     //使用FNV1_32_HASH算法计算服务器的Hash值,这里不使用重写hashCode的方法，最终效果没区别  
     private static int getHash(String str){  
         final int p = 16777619;  
         int hash = (int)2166136261L;  
         for (int i = 0; i < str.length(); i++)  
             hash = (hash ^ str.charAt(i)) * p;  
         hash += hash << 13;  
         hash ^= hash >> 7;  
         hash += hash << 3;  
         hash ^= hash >> 17;  
         hash += hash << 5;  

         // 如果算出来的值为负数则取其绝对值  
         if (hash < 0)  
             hash = Math.abs(hash);  
         return hash;  
     }  

     //得到应当路由到的结点  
     private static String getServer(String key){  
        //得到该key的hash值  
         int hash = getHash(key);  
         // 得到大于该Hash值的所有Map  
         SortedMap<Integer, String> subMap = virtualNodes.tailMap(hash);  
         String virtualNode;  
         if(subMap.isEmpty()){  
            //如果没有比该key的hash值大的，则从第一个node开始  
            Integer i = virtualNodes.firstKey();  
            //返回对应的服务器  
            virtualNode = virtualNodes.get(i);  
         }else{  
            //第一个Key就是顺时针过去离node最近的那个结点  
            Integer i = subMap.firstKey();  
            //返回对应的服务器  
            virtualNode = subMap.get(i);  
         }  
         //virtualNode虚拟节点名称要截取一下  
         if(StringUtils.isNotBlank(virtualNode)){  
             return virtualNode.substring(0, virtualNode.indexOf("&&"));  
         }  
         return null;  
     }  

     public static void main(String[] args){  
         String[] keys = {"太阳", "月亮", "星星"};  
         for(int i=0; i<keys.length; i++)  
             System.out.println("[" + keys[i] + "]的hash值为" +  
                     getHash(keys[i]) + ", 被路由到结点[" + getServer(keys[i]) + "]");  
     }  
	}
	令牌桶，
	long timeStamp=getNowTime(); 
	int capacity; // 桶的容量
	int rate ;//令牌放入速度
	int tokens;//当前水量
	bool control() {
	   //先执行添加令牌的操作
	   long  now = getNowTime();
	   tokens = max(capacity, tokens+ (now - timeStamp)*rate); 
	   timeStamp = now;   //令牌已用完，拒绝访问
	   if(tokens<1){
		 return false;
	   }else{//还有令牌，领取令牌
		 tokens--;
		 retun true;
	   }
	 } 
	布隆过滤器，
	cluster集群问题，扩容怎么扩容，以及问题处理，哨兵模式问题，怎么模糊搜索想要的数据，例如订单详情字段name:zhangsan，怎么搜张三或者zhang



6、业务问题，问你的工作流程，你说后，会问你有一块具体怎么执行的，你什么解决方案
自由发挥
7、算法：斐波那契数列
public class Febonacci {
    /**
     * 用递归实现斐波那契数列
     * @param i 需要得到的第i项
     * @return 第i项内容
     */
    public static int febonaccis(int i){
        if(i == 1 || i == 2){
            return 1;
        }else{
            return febonaccis(i-1) + febonaccis(i - 2);
        }
    }

    public static void main(String[] args) {
       System.out.println( febonaccis(6) );
    }

}

8、树的遍历算法，具体使用方法，这个实现的缺点，怎么改进
前序遍历、中序遍历、后序遍历
第二天
1、springcloud服务治理是怎么实现的？
不会
2、mysql底层数据结构是什么？做过哪些数据库优化？
b+树，索引优化和字段多分表等优化方案，
3、mysql 底层b+树存储在磁盘上，那索引同时存储在磁盘时为什么索引会速度快呢？磁盘读取很慢
这个太底层不知道怎么回答，我尝试回答innodb的文件存储结构（很显然面试官不想要这个答案），那就不清楚了
4、currentHashMap原理？
这里问我如何保证线程安全的我就简单介绍使用sync去解决代码块保证写是线程安全的，另外追问为什么保证线程安全？
5、为什么保证线程安全？其实就是问为什么会出现死循环呢？
这里我回答超级好，我将为什么会出现死循环情况跟他说，然后说到一半他说：我知道你了解这块你回答这里足以。准备充足。
6、问了下redis使用场景？
我说使用list和string
7、redis缓存击穿、缓存穿透、缓存雪崩场景及解决方案？
这里问了布隆过滤器使用，回答一般不太好毕竟没用过
8、redis在不改变代码情况下如何扩容？
增加代理服务器，仅修改配置文件中代理地址无需修改代码，这个不知道对不对他没说。
9、redis list底层数据结构
这里我说了使用ziplist和双端队列也解释了ziplist、linedList是什么但是怎么转换我忘了没讲
https://blog.csdn.net/levy_cui/article/details/70876621
10、mvcc原理
答得一般
11、笔试题
wait notify notifyAll实现一个程序，每生产俩个（最多2个）才能进行消费，消费完后才能再生产
